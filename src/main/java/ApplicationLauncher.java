/*
 * Created by Hicham B.I. on 28/10/16.
 */

import org.apache.catalina.Context;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.startup.Tomcat;
import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
import org.apache.tomcat.util.descriptor.web.ContextResource;
import org.hsqldb.server.Server;

import javax.servlet.ServletException;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class ApplicationLauncher {

    private final static String WEB_APP_DIR_LOCATION = "src/main/webapp/";
    private final static String DATA_BASE_NAME = "dsMyHsqlDB";
    private final static String TOMCAT_BASE_DIR = "tomcat-server";
    private final static Integer TOMCAT_PORT = 8080;
    private final static Integer DATA_BASE_SERVER_PORT = 9001;

    public static void main(String[] args) throws Exception {
        createInMemoryDB();
        initializeDb();

        Tomcat tomcat = new Tomcat();
        configureTomcat(tomcat, WEB_APP_DIR_LOCATION, TOMCAT_PORT);

        launchTomcat(tomcat, false);
    }

    private static void createInMemoryDB() {
        Server server = new Server();
        server.setDatabaseName(0, DATA_BASE_NAME);
        server.setDatabasePath(0, "mem:" + DATA_BASE_NAME);
        server.setPort(DATA_BASE_SERVER_PORT);
        server.start();
    }

    private static void initializeDb() throws ClassNotFoundException, SQLException {
        String driver = "org.hsqldb.jdbcDriver";
        Class.forName(driver);
        String url = "jdbc:hsqldb:hsql://localhost:" + DATA_BASE_SERVER_PORT + "/" + DATA_BASE_NAME;
        Connection c = DriverManager.getConnection(url);

        Statement stmnt = c.createStatement();
        stmnt.executeQuery("CREATE TABLE WISH_LIST(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,    LABEL VARCHAR(50) NOT NULL,    QUANTITY INTEGER NOT NULL);");

        stmnt.executeQuery(
                "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Banane', 3);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Sucre blanc', 75);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Oeuf', 1);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Levure', 1);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Sel', 1);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Farine', 150);" +
                        "INSERT INTO WISH_LIST(LABEL, QUANTITY) VALUES('Beurre', 70);"
        );
        stmnt.close();
    }

    private static void configureTomcat(Tomcat tomcat, String webappDirLocation, Integer port) throws ServletException {
        tomcat.setBaseDir(TOMCAT_BASE_DIR); //Must be the first instruction
        tomcat.setPort(port);
        tomcat.enableNaming();

        Context rootContext = tomcat.addWebapp("/", new File(webappDirLocation).getAbsolutePath());
        rootContext.setParentClassLoader(Thread.currentThread().getContextClassLoader());

        ContextResource contextResource = getContextResource();
        rootContext.getNamingResources().addResource(contextResource);

        ContextEnvironment environment = getContextEnvironment();
        rootContext.getNamingResources().addEnvironment(environment);
    }

    private static void launchTomcat(final Tomcat tomcat, boolean daemon) {
        Thread tomcatThread = new Thread(() -> {
            try {
                tomcat.start();
                tomcat.getServer().await();
            } catch (LifecycleException e) {
                e.printStackTrace();
            }
        });

        tomcatThread.setDaemon(daemon);
        tomcatThread.start();
    }

    private static ContextEnvironment getContextEnvironment() {
        ContextEnvironment environment = new ContextEnvironment();
        environment.setType("java.lang.String");
        environment.setName("app/exportDir");
        environment.setValue("c:/exportdir");

        return environment;
    }

    private static ContextResource getContextResource() {
        ContextResource contextResource = new ContextResource();
        contextResource.setName("jdbc/" + DATA_BASE_NAME);
        contextResource.setType("javax.sql.DataSource");
        contextResource.setAuth("Container");

        contextResource.setProperty("username", "sa");
        contextResource.setProperty("password", "");
        contextResource.setProperty("driverClassName", "org.hsqldb.jdbcDriver");

        contextResource.setProperty("url", "jdbc:hsqldb:hsql://localhost:" + DATA_BASE_SERVER_PORT + "/" + DATA_BASE_NAME);
        contextResource.setProperty("maxActive", "100");
        contextResource.setProperty("maxWait", "10000");
        contextResource.setProperty("maxIdle", "30");

        return contextResource;
    }
}
